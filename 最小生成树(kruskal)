#include<stdio.h>
#include<algorithm>
using namespace std;

const int maxn=28;
int dad[maxn],sizes[maxn];
struct Edge
{
    int u,v,w;
    bool operator<(const Edge &a)const
    {
        return w<a.w;
    }
}edge[maxn*maxn/2];

void init(int n)
{
    for(int i=0;i<n;i++)
    {
        dad[i]=i;
        sizes[i]=1;
    }
}

int finds(int x)
{
    while(dad[x]!=x)
    {
        dad[x]=dad[dad[x]];
        x=dad[x];
    }
    return x;
}

void unions(int x,int y)
{
    int px=finds(x),py=finds(y);
    if(sizes[px]<sizes[py])
    {
        dad[px]=py;
        sizes[py]+=sizes[px];
    }
    else
    {
        dad[py]=px;
        sizes[px]+=sizes[py];
    }
}

int main()
{
    int n;
    while(scanf("%d",&n)&&n)
    {
        char ii,jj;
        int i,j,m,mark=0;
        init(n);
        for(int p=0;p<n-1;p++)
        {
            scanf(" %c %d",&ii,&m);
            i=ii-65;
            for(int q=0;q<m;q++)
            {
                int len;
                scanf(" %c %d",&jj,&len);
                j=jj-65;
                edge[mark].u=i,edge[mark].v=j,edge[mark++].w=len;
            }
        }
        sort(edge,edge+mark);
        int sum=0;
        for(int i=0;i<mark;i++)
        {
            if(finds(edge[i].u)!=finds(edge[i].v))
            {
                unions(edge[i].u,edge[i].v);
                sum+=edge[i].w;
            }
        }
        printf("%d\n",sum);
    }
    return 0;
}
